% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/village.R
\docType{class}
\name{village}
\alias{village}
\title{Village}
\description{
This is an object that represents the state of a village at a particular time.
}
\details{
This class acts as a type of record that holds the values of the different village variables. This class can be subclassed
to include more variables that aren't present.
}
\section{Methods}{

\describe{
\item{\code{initialize()}}{Creates a new village}
\item{\code{propagate()}}{Advances the village a single time step}
\item{\code{set_initial_state()}}{Initializes the initial state of the village}
\item{\code{add_trade_partner(newTradePartner, addBack)}}{Adds a trde partner}.
\item{\code{as_tibble()}}{Adds a trde partner}.
\item{\code{plot()}}{Plots the time dependant variables}.
}
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{name}}{An optional name for the village}

\item{\code{initial_condition}}{A function that sets the initial state of the village}

\item{\code{StateRecords}}{A list of state objects, one for each time step}

\item{\code{tradePartners}}{A list of villages that this village can trade with}

\item{\code{models}}{A list of functions or a single function that should be run at each timestep}

\item{\code{model_data}}{Optional data that models may need}

\item{\code{winik_mgr}}{The manager that handles all of the winiks}

\item{\code{resource_mgr}}{The manager that handles all of the resources
Initializes a village}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{village$new()}}
\item \href{#method-optimize}{\code{village$optimize()}}
\item \href{#method-propagate}{\code{village$propagate()}}
\item \href{#method-add_trade_partner}{\code{village$add_trade_partner()}}
\item \href{#method-set_initial_state}{\code{village$set_initial_state()}}
\item \href{#method-as_tibble}{\code{village$as_tibble()}}
\item \href{#method-plot}{\code{village$plot()}}
\item \href{#method-clone}{\code{village$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
This method is meant to set the variables that are needed for a village to propagate through
time.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$new(name, initial_condition, models = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{name}}{An optional name for the village}

\item{\code{initial_condition}}{A function that gets called on the first timestep}

\item{\code{models}}{A list of functions or a single function that should be run at each timestep
Utility method for optimizing particular aspects of the village class}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-optimize"></a>}}
\if{latex}{\out{\hypertarget{method-optimize}{}}}
\subsection{Method \code{optimize()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$optimize(simulation_days)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{simulation_days}}{The number of days that the simulation will run for
Propagates the village a single time step}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
In particalr, it's used to set the size of large vectors
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-propagate"></a>}}
\if{latex}{\out{\hypertarget{method-propagate}{}}}
\subsection{Method \code{propagate()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$propagate(date, total_days_passed)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date}}{The date that the village is computing the new state for}

\item{\code{total_days_passed}}{Number of days that have passed since the village's creation}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method is used to advance the village a single timestep. It should NOT be used
to set initial conditions. See the set_initial_state method.
}

\subsection{Returns}{
None
Connects two villages so that they can trade with each other.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_trade_partner"></a>}}
\if{latex}{\out{\hypertarget{method-add_trade_partner}{}}}
\subsection{Method \code{add_trade_partner()}}{
Connects two villages together for trade
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$add_trade_partner(newTradePartner, addBack = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{newTradePartner}}{A derived village object representing a village that this village
can trade with}

\item{\code{addBack}}{An optional parameter that, when true will
Runs the user defined function that sets the initial state of the village}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This method takes advantage of R6's reference semantics. Because classes that are derived
from village are R6, they can be directly modified.
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_initial_state"></a>}}
\if{latex}{\out{\hypertarget{method-set_initial_state}{}}}
\subsection{Method \code{set_initial_state()}}{
Runs the initial condition model
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$set_initial_state(date)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date}}{The date that the the initial condition represents}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-as_tibble"></a>}}
\if{latex}{\out{\hypertarget{method-as_tibble}{}}}
\subsection{Method \code{as_tibble()}}{
Gives a tibble representation of the state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$as_tibble()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Returns a tibble composing of rows which are
properties from village_state
Plots a dependent variable against time
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
This method can be used to quickly spot check various dependent
variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$plot(dependent_variable = "population")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dependent_variable}}{The variable name that should be plotted}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Returns a ggplot object representing the plot
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{village$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
