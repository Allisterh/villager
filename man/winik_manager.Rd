% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/winik_manager.R
\docType{class}
\name{winik_manager}
\alias{winik_manager}
\title{Winik Manager}
\description{
This object manages all of the winiks in a village
}
\details{
This class acts as an abstraction for handling many villagers.
}
\section{Methods}{

\describe{
\item{\code{initialize()}}{Creates a new manager}
\item{\code{get_winik()}}{Retrieves a minik from the manager}
\item{\code{add_winik()}}{Adds a winik to the manager}
\item{\code{create_winik()}}{Creates a new winik and adds it to the manager}
\item{\code{remove_winik()}}{Removes a winik from the manager}
\item{\code{get_states()}}{Returns all of the villager states in a vector}
\item{\code{get_winik_index()}}{Retrieves the index of a winik in the internal list}
}
Creates a new winik manager
}

\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{winiks}}{A list of winiks}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{winik_manager$new()}}
\item \href{#method-get_winik}{\code{winik_manager$get_winik()}}
\item \href{#method-add_winik}{\code{winik_manager$add_winik()}}
\item \href{#method-create_winik}{\code{winik_manager$create_winik()}}
\item \href{#method-remove_winik}{\code{winik_manager$remove_winik()}}
\item \href{#method-get_states}{\code{winik_manager$get_states()}}
\item \href{#method-get_winik_index}{\code{winik_manager$get_winik_index()}}
\item \href{#method-clone}{\code{winik_manager$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$new(winiks = vector())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{winiks}}{An optional vector of winiks that the manager starts with
Gets a winik given an identifier}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_winik"></a>}}
\if{latex}{\out{\hypertarget{method-get_winik}{}}}
\subsection{Method \code{get_winik()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$get_winik(winik_identifier)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{winik_identifier}}{The identifier of the requested winik}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A winik object
Adds a winik to the manager.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-add_winik"></a>}}
\if{latex}{\out{\hypertarget{method-add_winik}{}}}
\subsection{Method \code{add_winik()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$add_winik(new_winik)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{new_winik}}{The winik to add}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
Creates a winik,adds it to the manager, and then returns it
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-create_winik"></a>}}
\if{latex}{\out{\hypertarget{method-create_winik}{}}}
\subsection{Method \code{create_winik()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$create_winik(params)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{params}}{Unknown}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
There \emph{has} to be an easy way to pass any number of arguments as a named list
and unpack them and use them in the winik initialize method
}

\subsection{Returns}{
The newly created winik
Removes a winik from the manager
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_winik"></a>}}
\if{latex}{\out{\hypertarget{method-remove_winik}{}}}
\subsection{Method \code{remove_winik()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$remove_winik(winik_identifier)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{winik_identifier}}{The identifier of the winik being removed}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
None
Returns a list of villagers represented as tibbles
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_states"></a>}}
\if{latex}{\out{\hypertarget{method-get_states}{}}}
\subsection{Method \code{get_states()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$get_states()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A list of data frames
Returns the index of a winik in the internal winik list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_winik_index"></a>}}
\if{latex}{\out{\hypertarget{method-get_winik_index}{}}}
\subsection{Method \code{get_winik_index()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$get_winik_index(winik_identifier)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{winik_identifier}}{The identifier of the winik being located}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The index in the list, or NA
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{winik_manager$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
